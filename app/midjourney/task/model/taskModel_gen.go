// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMidjourneyTaskIdPrefix     = "cache:midjourney:task:id:"
	cacheMidjourneyTaskTaskIdPrefix = "cache:midjourney:task:taskId:"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Task, error)
		FindOneByTaskId(ctx context.Context, taskId string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaskModel struct {
		sqlc.CachedConn
		table string
	}

	Task struct {
		Id           int64  `db:"id"`
		TaskId       string `db:"task_id"`
		UserId       int64  `db:"user_id"`
		ParentTaskId string `db:"parent_task_id"`
		Action       string `db:"action"`
		Index        int64  `db:"index"`
		Prompt       string `db:"prompt"`
		ImageUrl     string `db:"image_url"`
		Description  string `db:"description"`
		Status       string `db:"status"`
		State        string `db:"state"`
		CreatedAt    int64  `db:"created_at"`
		UpdatedAt    int64  `db:"updated_at"`
	}
)

func newTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTaskModel {
	return &defaultTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	midjourneyTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskIdPrefix, id)
	midjourneyTaskTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskTaskIdPrefix, data.TaskId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, midjourneyTaskIdKey, midjourneyTaskTaskIdKey)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, id int64) (*Task, error) {
	midjourneyTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskIdPrefix, id)
	var resp Task
	err := m.QueryRowCtx(ctx, &resp, midjourneyTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) FindOneByTaskId(ctx context.Context, taskId string) (*Task, error) {
	midjourneyTaskTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskTaskIdPrefix, taskId)
	var resp Task
	err := m.QueryRowIndexCtx(ctx, &resp, midjourneyTaskTaskIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `task_id` = ? limit 1", taskRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, taskId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	midjourneyTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskIdPrefix, data.Id)
	midjourneyTaskTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskTaskIdPrefix, data.TaskId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.UserId, data.ParentTaskId, data.Action, data.Index, data.Prompt, data.ImageUrl, data.Description, data.Status, data.State)
	}, midjourneyTaskIdKey, midjourneyTaskTaskIdKey)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, newData *Task) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	midjourneyTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskIdPrefix, data.Id)
	midjourneyTaskTaskIdKey := fmt.Sprintf("%s%v", cacheMidjourneyTaskTaskIdPrefix, data.TaskId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.TaskId, newData.UserId, newData.ParentTaskId, newData.Action, newData.Index, newData.Prompt, newData.ImageUrl, newData.Description, newData.Status, newData.State, newData.Id)
	}, midjourneyTaskIdKey, midjourneyTaskTaskIdKey)
	return err
}

func (m *defaultTaskModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMidjourneyTaskIdPrefix, primary)
}

func (m *defaultTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
